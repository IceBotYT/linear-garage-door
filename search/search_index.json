{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>[!CAUTION] This library is now deprecated in favor of the new API, found here</p>"},{"location":"#linear-garage-door","title":"Linear Garage Door","text":"<p>Documentation: https://IceBotYT.github.io/linear-garage-door</p> <p>Source Code: https://github.com/IceBotYT/linear-garage-door</p> <p>PyPI: https://pypi.org/project/linear-garage-door/</p> <p>Control Linear Garage Doors with Python</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install linear-garage-door\n</code></pre>"},{"location":"#development","title":"Development","text":"<ul> <li>Clone this repository</li> <li>Requirements:</li> <li>Poetry</li> <li>Python 3.7+</li> <li>Create a virtual environment and install the dependencies</li> </ul> <pre><code>poetry install\n</code></pre> <ul> <li>Activate the virtual environment</li> </ul> <pre><code>poetry shell\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>pytest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is automatically generated from the content of the docs directory and from the docstrings  of the public signatures of the source code. The documentation is updated and published as a Github project page   automatically as part each release.</p>"},{"location":"#releasing","title":"Releasing","text":"<p>Trigger the Draft release workflow (press Run workflow). This will update the changelog &amp; version and create a GitHub release which is in Draft state.</p> <p>Find the draft release from the GitHub releases and publish it. When  a release is published, it'll trigger release workflow which creates PyPI  release and deploys updated documentation.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>Pre-commit hooks run all the auto-formatters (e.g. <code>black</code>, <code>isort</code>), linters (e.g. <code>mypy</code>, <code>flake8</code>), and other quality  checks to make sure the changeset is in good shape before a commit/push happens.</p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want e.g. want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This project was generated using the wolt-python-package-cookiecutter template.</p>"},{"location":"api_docs/","title":"API documentation","text":"<p>Control Linear Garage Doors.</p>"},{"location":"api_docs/#linear_garage_door.Linear","title":"<code>Linear</code>","text":"<p>A Linear account.</p> <p>Instantiate this class then run <code>login()</code> with your credentials to connect.</p> Example <pre><code>from linear_garage_door import Linear\n\nasync def on_device_state_event(data: dict[str, dict[str, str] | str]):\n    print(data)\n\nlinear = Linear(on_device_state_event=on_device_state_event)\n\n# Log in to the account\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\n# Get the sites on the account\nsites = await linear.get_sites()\n\n# Loop through each site and get the devices\nfor site in sites:\n    devices = await linear.get_devices(site[\"id\"])\n    for device in devices:\n        print(\"\")\n        print(device[\"name\"], \"----\")\n        device_state = await linear.get_device_state(device[\"id\"])\n        for key in device_state.keys():\n            print(key, \"--\")\n            print(\"\")\n            for attribute in device_state[key].keys():\n                print(attribute, \"=\", device_state[key][attribute])\n            print(\"\")\n\nawait linear.close()\n</code></pre>"},{"location":"api_docs/#linear_garage_door.Linear.__init__","title":"<code>__init__(on_device_state_event=None)</code>","text":"<p>Initialize the Linear account.</p> <p>Parameters:</p> Name Type Description Default <code>on_device_state_event</code> <code>function | None</code> <p>Pass a function to subscribe to device state events. The function provided will be called with the data similar to the data returned by <code>login()</code>. Defaults to None.</p> <code>None</code>"},{"location":"api_docs/#linear_garage_door.Linear.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the WebSocket.</p>"},{"location":"api_docs/#linear_garage_door.Linear.get_device_state","title":"<code>get_device_state(device_id)</code>  <code>async</code>","text":"<p>Get state of device.</p> Example <pre><code>from linear_garage_door import Linear\n\nasync def on_device_state_event(data: dict[str, dict[str, str] | str]):\n    print(data)\n\nlinear = Linear(on_device_state_event=on_device_state_event)\n\n# Log in to the account\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\n# Get the sites on the account\nsites = await linear.get_sites()\n\n# Loop through each site and get the devices\nfor site in sites:\n    devices = await linear.get_devices(site[\"id\"])\n    for device in devices:\n        print(\"\")\n        print(device[\"name\"], \"----\")\n        device_state = await linear.get_device_state(device[\"id\"])\n        for key in device_state.keys():\n            print(key, \"--\")\n            print(\"\")\n            for attribute in device_state[key].keys():\n                print(attribute, \"=\", device_state[key][attribute])\n            print(\"\")\n\nawait linear.close()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get the state of.</p> required <p>Raises:</p> Type Description <code>NotOpen</code> <p>The WebSocket has not been opened.</p> <p>Returns:</p> Type Description <code>dict[str, dict[str, str]]</code> <p>A dictionary that shows each subdevice and their respective states.</p>"},{"location":"api_docs/#linear_garage_door.Linear.get_devices","title":"<code>get_devices(site)</code>  <code>async</code>","text":"<p>Get devices available under a specific site.</p> Example <pre><code>from linear_garage_door import Linear\n\nlinear = Linear()\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\nsites = await linear.get_sites()\nfor site in sites:\n    devices = await linear.get_devices(site[\"id\"])\n    for device in devices:\n        print(device[\"name\"], \"(\", device[\"id\"], \") has the following subdevices:\")\n        for subdevice in device[\"subdevices\"]:\n            print(subdevice)\n\nawait linear.close()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site</code> <code>str</code> <p>The site ID to fetch the devices from. Get site IDs by calling <code>get_sites()</code>.</p> required <p>Raises:</p> Type Description <code>NotOpen</code> <p>The WebSocket has not been opened.</p> <p>Returns:</p> Type Description <code>list[dict[str, list[str] | str]]</code> <p>A list of dictionaries that contains the ID, name, and subdevices of that device. (Subdevices usually are GDO, Light, etc...)</p>"},{"location":"api_docs/#linear_garage_door.Linear.get_sites","title":"<code>get_sites()</code>  <code>async</code>","text":"<p>Get sites available under this account.</p> Example <pre><code>from linear_garage_door import Linear\n\nlinear = Linear()\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\nsites = await linear.get_sites()\nfor site in sites:\n    print(site[\"name\"], \"has id\", site[\"id\"])\n\nawait linear.close()\n</code></pre> <p>Raises:</p> Type Description <code>NotOpen</code> <p>The WebSocket has not been opened.</p> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>A list of dicts that contain the device's ID and name.</p>"},{"location":"api_docs/#linear_garage_door.Linear.login","title":"<code>login(email, password, device_id=None, client_session=None)</code>  <code>async</code>","text":"<p>Logs in to a Linear account.</p> Tip <p>Need a device ID? Grab one here.</p> Example <pre><code>from linear_garage_door import Linear\n\nlinear = Linear()\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\nawait linear.close()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email of the account to log in to.</p> required <code>password</code> <code>str</code> <p>The password of the account to log in to.</p> required <code>device_id</code> <code>str | None</code> <p>The device ID of your choice. Must be a UUID. Defaults to a random UUID.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidLogin</code> <p>The login provided is invalid.</p> <code>InvalidDeviceID</code> <p>The device ID provided is invalid.</p> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>A dict with the type of response, most likely \"WELCOME\", the headers of the response, and the body.</p>"},{"location":"api_docs/#linear_garage_door.Linear.operate_device","title":"<code>operate_device(device_id, subdevice, subdevice_state)</code>  <code>async</code>","text":"<p>Operate a device.</p> <p>Here are the known states for each subdevice:</p> <ul> <li><code>GDO</code>: <code>Open</code> or <code>Close</code> (Not <code>Closed</code>!)</li> <li><code>Light</code>: <code>On</code> or <code>Off</code></li> </ul> <p>More reverse engineering will be required in the future for setting the Light brightness and getting the progress of door opening.</p> <p>This does not return anything. Events will be fired from the server and can give you a state.</p> Example <pre><code>from linear_garage_door import Linear\n\nlinear = Linear()\n\nawait linear.login(\"email@email.com\", \"password\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\nawait linear.operate_device(device[\"id\"], \"GDO\", \"Open\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID you want to operate. You can get this from <code>get_devices()</code></p> required <code>subdevice</code> <code>str</code> <p>The subdevice you want to operate. The list of subdevices is also available from <code>get_devices()</code></p> required <code>subdevice_state</code> <code>str</code> <p>The state to set the subdevice to. I don't know where the full list of states are, but you can get a good guess from <code>get_device_state()</code></p> required <p>Raises:</p> Type Description <code>NotOpen</code> <p>The WebSocket has not been opened.</p>"},{"location":"api_docs/#linear_garage_door.errors","title":"<code>errors</code>","text":""},{"location":"api_docs/#linear_garage_door.errors.InvalidDeviceIDError","title":"<code>InvalidDeviceIDError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The device ID provided is invalid.</p>"},{"location":"api_docs/#linear_garage_door.errors.InvalidLoginError","title":"<code>InvalidLoginError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The login provided is invalid.</p>"},{"location":"api_docs/#linear_garage_door.errors.NotOpenError","title":"<code>NotOpenError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The WebSocket has not been opened.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0210-2024-08-01","title":"0.2.10 - 2024-08-01","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>This project is now deprecated in favor of the new Nice G.O. library, found here</li> </ul>"},{"location":"changelog/#029-2024-02-11","title":"0.2.9 - 2024-02-11","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Major makeover of all logic, removed WebSocketMonitor usage.</li> </ul>"},{"location":"changelog/#028-2024-01-30","title":"0.2.8 - 2024-01-30","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Added retry logic to <code>new_connection</code></li> </ul>"},{"location":"changelog/#027-2023-08-09","title":"0.2.7 - 2023-08-09","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Bumped dependencies</li> </ul>"},{"location":"changelog/#026-2023-05-08","title":"0.2.6 - 2023-05-08","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated how device states are fetched</li> </ul>"},{"location":"changelog/#025-2023-04-11","title":"0.2.5 - 2023-04-11","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Various bug fixes</li> </ul>"},{"location":"changelog/#024-2023-02-05","title":"0.2.4 - 2023-02-05","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Removed <code>websocket-client</code> as a dependency</li> </ul>"},{"location":"changelog/#023-2023-02-04","title":"0.2.3 - 2023-02-04","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Added keepalive ping</li> </ul>"},{"location":"changelog/#022-2023-02-03","title":"0.2.2 - 2023-02-03","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fixed the <code>unsupported operand type(s) for |: 'types.GenericAlias' and 'NoneType'</code> error when using this library below Python 3.10</li> </ul>"},{"location":"changelog/#021-2023-02-01","title":"0.2.1 - 2023-02-01","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>If custom session is passed in, do not close it when <code>close()</code> is called</li> </ul>"},{"location":"changelog/#020-2023-02-01","title":"0.2.0 - 2023-02-01","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fixed dependency conflict for Home Assistant</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added the option to pass in a ClientSession</li> </ul>"},{"location":"changelog/#010-2023-01-31","title":"0.1.0 - 2023-01-31","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Initial functionality</li> </ul>"}]}